import java.util.Random;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Map;
import java.util.TreeMap;

public class TSP {

    Random rand;
    final int PRIMGEN = 20;
    final double MUTPROB = 0.2;

    TreeMap<Integer,TSPInd> poblacionOrden;
    TreeMap<Double,TSPInd> poblacionProb;
    final static int[][] CIUDADES = {{0,908,1503,2007,1193,2258,1117,678,306,1650,1703,117,1882,1310,3349,889,760,2348,4701,782,697,1370,1431,1690,3049,395,697,1328,2625,1552,828,490,1681,481,606,1397,659,1244,810,881,1109,1145,3237,503,461,1407,967,760,1126,684,1000},
    {908,0,1668,2162,1782,1389,505,448,602,970,1858,791,1013,441,2709,246,181,1707,4060,127,546,928,749,1845,2409,503,316,600,1984,824,983,540,948,636,302,826,1254,501,171,572,1670,460,2556,631,497,538,1528,915,1281,835,131},
    {1503,1668,0,494,721,3020,1578,1899,1207,2417,424,1396,2624,2070,4116,1697,1520,3114,5467,1542,1997,1842,2197,177,3816,1155,1457,1869,3391,2093,996,1219,2301,1032,1366,1858,862,1958,1570,1343,885,1911,4003,1065,1221,2167,652,879,387,981,1760},
    {2007,2162,494,0,1215,3502,2072,2393,1701,2911,388,1890,3136,2564,4610,2191,2014,3608,5961,2036,2491,2336,2891,317,4310,1649,1950,2363,3885,2587,1490,1713,2795,1526,1860,2352,1356,2452,2064,1837,1376,2405,4487,1559,1715,26611,1146,1373,881,1475,2254},
    {1193,1782,721,1215,0,3132,1666,2013,1293,2531,839,1310,2756,2184,4230,1811,1634,3228,5581,1656,1890,1930,2311,898,3930,1269,1571,1957,3495,2181,771,1305,2389,1118,1480,1946,534,2046,1658,1431,164,2025,4117,1150,1307,2281,254,967,475,1069,1874},
    {2258,1389,3020,3502,3132,0,1493,1780,1952,1466,3208,2141,376,1038,1425,1578,1570,769,2776,1506,1878,1530,1347,3195,1125,1863,1705,1202,620,1426,2333,1894,1422,1986,1691,1428,2604,1113,1448,1728,3020,1633,1312,1981,1808,850,2878,2265,2631,2185,1258},
    {1117,505,1578,2072,1666,1493,0,886,810,1373,1768,999,1117,844,2813,684,559,1811,4164,541,984,317,1153,1755,2503,721,739,291,2088,505,1094,626,729,813,552,325,1178,380,344,235,1502,898,2700,780,704,642,1370,699,1191,650,534},
    {678,448,1899,2393,2013,1780,886,0,833,922,2045,804,1404,832,2621,202,479,1619,3672,425,98,1319,702,2076,2321,744,494,991,1896,1215,1214,817,1339,867,579,1217,1346,902,542,943,1796,416,2498,862,678,929,1654,1123,1502,1066,522},
    {306,602,1207,1701,1293,1952,810,833,0,1350,1397,189,1576,1004,3049,631,454,2048,4401,476,931,1064,1131,1384,2749,89,391,1022,2325,1246,522,184,1375,175,300,1091,793,938,494,575,1246,845,2937,208,155,1101,1067,454,820,378,694},
    {1650,970,2417,2911,2531,1466,1373,922,1350,0,2607,1540,1191,529,1699,720,997,697,3049,943,952,1463,220,2594,1399,1262,1022,1148,974,1372,1732,1335,1355,1385,1097,1361,2003,1046,1029,1430,2419,496,1586,1380,1196,784,2277,1665,2030,1584,839},
    {1703,1858,424,388,839,3208,1768,2045,1397,2607,0,1586,2832,2260,4306,1887,1710,3304,5657,1732,2187,2032,2387,388,4006,1345,1647,2059,3581,2283,1186,1440,2491,1222,1556,2048,1052,2148,1760,1533,1000,2101,4193,1255,1411,2357,770,1069,577,1171,1949},
    {117,791,1396,1890,1310,2141,999,804,189,1540,1586,0,1765,1193,3239,820,643,2237,4590,665,814,1253,1320,1573,2939,278,580,1211,2504,1435,711,373,1564,364,489,1280,776,1127,693,764,1226,1034,3126,396,344,1290,1084,643,1009,567,883},
    {1882,1013,2624,3136,2756,376,1117,1404,1576,1191,2832,1765,0,662,1696,1202,1194,694,3047,1140,1492,1154,971,2819,1396,1487,1329,826,971,1049,1957,1553,1046,1610,1315,1052,2228,737,1072,1352,2644,1257,1583,1605,1432,475,2492,1889,2255,1809,882},
    {1310,441,2070,2564,2184,1038,844,832,1004,529,2260,1193,662,0,2228,630,622,1226,3579,568,930,934,309,2247,1928,915,757,606,1493,830,1385,981,826,1038,743,832,1656,507,490,901,2072,595,2115,1033,938,255,1930,1317,1683,1237,310},
    {3349,2709,4116,4610,4230,1425,2813,2621,3049,1699,4306,3239,1696,2228,0,2419,2696,1002,1350,2642,2650,2849,1919,4293,300,2961,2721,2522,933,2746,3431,3034,2745,3084,2796,2748,3702,2433,2768,3048,4118,2205,113,3079,2895,2171,3976,3363,3729,3283,2578},
    {889,246,1697,2191,1811,1578,684,202,631,720,1887,820,1202,630,2419,0,277,1417,3770,223,300,1117,490,1874,2119,542,302,789,1694,1013,1012,615,1137,665,377,1015,1283,700,340,741,1699,214,2306,660,476,727,1557,944,1310,864,320},
    {760,181,1520,2014,1634,1570,559,479,454,997,1710,643,1194,622,2696,277,0,1694,4047,54,577,774,777,1697,2396,365,180,729,1971,977,835,392,1101,488,154,884,1160,664,215,616,1522,491,2583,483,349,719,1380,767,1133,687,312},
    {2348,1707,3114,3608,3228,769,1811,1619,2048,697,3304,2237,694,1226,1002,1417,1694,0,2353,1640,1649,1848,917,3291,702,1959,1719,1520,277,1744,2429,2032,1743,2082,1794,1746,2700,1431,2760,2046,3116,1203,889,2077,1893,1169,2974,2361,2727,2281,1576},
    {4701,4060,5467,5961,5581,2776,4164,3672,4401,3049,5657,4590,3047,3579,1350,3770,4047,2353,0,3993,4002,4201,3270,5644,1650,4312,4072,3873,2284,4097,4782,4385,4096,4435,4147,4099,4953,3784,4119,4399,5469,3556,1464,4430,4246,3522,5327,4714,4980,4634,3929},
    {782,127,1542,2036,1656,1506,541,425,476,943,1732,665,1140,568,2642,223,54,1640,3993,0,523,756,723,1719,2342,387,202,711,1917,935,857,414,1083,500,176,712,1128,646,197,598,1544,437,2529,495,371,665,1402,789,1155,709,258},
    {697,546,1997,2491,1890,1878,984,98,931,952,2187,814,1492,930,2650,300,577,1649,4002,523,0,1417,732,2174,2350,842,602,1089,1926,1313,1312,915,1437,965,677,1309,1356,1000,640,1041,1806,446,2538,960,776,1027,1664,1244,1610,1164,620},
    {1370,928,1842,2336,1930,1530,317,1319,1064,1463,2032,1253,1154,934,2849,1117,774,1848,4201,756,1417,0,1249,2019,2549,975,954,328,2125,358,1358,890,545,1077,767,102,1442,417,559,499,1776,1331,2737,1044,1041,679,1634,963,1455,915,797},
    {1431,749,2197,2891,2311,1347,1153,702,1131,220,2387,1320,971,309,1919,490,777,917,3270,723,732,1249,0,2374,1619,1042,802,928,1194,1152,1502,1115,1135,1165,877,1141,1783,826,809,1210,2199,286,1806,1160,976,564,2054,1444,1810,1364,619},
    {1690,1845,177,317,898,3195,1755,2076,1384,2594,388,1573,2819,2247,4293,1874,1697,3291,5644,1719,2174,2019,2374,0,3993,1332,1634,2046,3568,2270,1173,2734,2442,2784,2496,2448,3402,2133,2468,2748,1062,2088,4180,1242,1398,2344,829,1056,564,1158,1937},
    {3049,2409,3816,4310,3930,1125,2503,2321,2749,1399,4006,2939,1396,1928,300,2119,2396,702,1650,2342,2350,2549,1619,3993,0,2661,2421,2222,633,2446,2731,2734,2442,2784,2496,2448,3402,2133,2468,2748,3818,1905,187,2779,2595,1871,3676,3063,3429,2983,2278},
    {395,503,1155,1649,1269,1863,721,744,89,1262,1345,278,1487,915,2961,542,365,1959,4312,387,842,975,1042,1332,2661,0,302,933,2236,1157,470,95,1286,123,211,1002,741,849,415,486,1157,756,2848,118,66,1012,1015,402,768,322,605},
    {697,316,1457,1950,1571,1705,739,494,391,1022,1647,580,1329,757,2721,302,180,1719,4072,202,602,954,802,1634,2421,302,0,913,1996,1137,772,397,1283,425,192,1064,1043,844,395,796,1459,506,2608,420,236,854,1317,704,1070,624,447},
    {1328,600,1869,2363,1957,1202,291,991,1022,1148,2059,1211,826,606,2522,789,729,1520,3873,711,1089,328,928,2046,2222,933,913,0,1797,224,1403,960,438,1056,722,226,1469,89,504,526,1803,1003,2409,1050,898,350,1661,990,1482,942,469},
    {2625,1984,3391,3885,3495,620,2088,1896,2325,974,3581,2504,971,1493,933,1694,1971,277,2284,1917,1926,2125,1194,3568,633,2236,1996,1797,0,2021,2706,2309,2017,2359,2071,2023,2977,1708,2043,2323,3933,1480,820,2354,2170,1446,3250,2638,3004,2558,1853},
    {1552,824,2093,2587,2181,1426,505,1215,1246,1372,2283,1435,1049,830,2746,1013,977,1744,4097,935,1313,358,1152,2270,2446,1157,1137,224,2021,0,1627,1184,187,1280,946,256,1693,313,738,749,2027,1227,2633,1275,1122,575,1885,1214,1706,1166,693},
    {828,983,996,1490,771,2333,1094,1214,522,1732,1186,711,1957,1385,3431,1012,835,2429,4782,857,1312,1358,1502,1173,2731,470,772,1403,2706,1627,0,534,1756,347,681,1440,271,1314,885,859,687,1226,3318,380,536,1482,545,395,609,380,1075},
    {490,540,1219,1713,1305,1894,626,817,184,1335,1440,373,1553,981,3034,615,392,2032,4385,414,915,890,1115,2734,2734,95,397,960,2309,1184,534,0,1313,187,238,908,805,895,446,391,1221,829,2875,154,161,1043,1079,466,832,358,},
    {1681,948,2301,2795,2389,1422,729,1339,1375,1355,2491,1564,1046,826,2745,1137,1101,1743,4096,1083,1437,545,1135,2442,2442,1286,1283,438,2017,187,1756,1313,0,1409,1094,443,2027,437,886,958,2235,1350,2629,1376,1289,571,2187,1422,1914,1374,817},
    {481,636,1032,1526,1118,1986,813,867,175,1385,1222,364,1610,1038,3084,665,488,2082,4435,500,965,1077,1165,2784,2784,123,425,1056,2359,1280,347,187,1409,0,334,1093,618,972,538,578,1034,879,2971,33,189,1135,892,279,645,203,728},
    {606,302,1366,1860,1480,1691,552,579,300,1097,1556,489,1315,743,2796,377,154,1794,4147,176,677,767,877,2496,2496,211,192,722,2071,946,681,238,1094,334,0,877,952,657,208,609,1368,591,2637,329,195,805,1226,613,979,533,433},
    {1397,826,1858,2352,1946,1428,325,1217,1091,1361,2048,1280,1052,832,2748,1015,884,1746,4099,712,1309,102,1141,2448,2448,1002,1064,226,2023,256,1440,908,443,1093,877,0,1458,315,669,505,1792,1229,2635,1060,1029,577,1649,979,1471,931,695},
    {659,1254,862,1356,534,2604,1178,1346,793,2003,1052,776,2228,1656,3702,1283,1160,2700,4953,1128,1356,1442,1783,3402,3402,741,1043,1469,2977,1693,271,805,2027,618,952,1458,0,1590,1156,943,449,1497,3589,650,809,1753,308,479,475,581,1346},
    {1244,501,1958,2452,2046,1113,380,902,938,1046,2148,1127,737,507,2433,700,664,1431,3784,646,1000,417,826,2133,2133,849,844,89,1708,313,1314,895,437,972,657,315,1590,0,449,615,1892,914,2320,967,852,262,1749,1079,1571,1031,380},
    {810,171,1570,2064,1658,1448,344,542,494,1029,1760,693,1072,490,2768,340,215,2760,4119,197,640,559,809,2468,2468,415,395,504,2043,738,885,446,886,538,208,669,1156,449,0,401,1572,554,2615,533,360,597,1430,817,1183,737,190},
    {881,572,1343,1837,1431,1728,235,943,575,1430,1533,764,1352,901,3048,741,616,2046,4399,598,1041,499,1210,2748,2748,486,796,526,2323,749,859,391,958,578,609,505,943,615,401,0,1277,955,2935,545,552,877,1135,464,956,416,591},
    {1109,1670,885,1376,164,3020,1502,1796,1246,2419,1000,1226,2644,2072,4118,1699,1522,3116,5469,1544,1806,1776,2199,1062,3818,1157,1459,1803,3933,2027,687,1221,2235,1034,1368,1792,449,1892,1572,1277,0,1913,4005,1067,1223,2169,412,813,636,915,1762},
    {1145,460,1911,2405,2025,1633,898,416,845,496,2101,1034,1257,595,2205,214,491,1203,3556,437,446,1331,286,2088,1905,756,506,1003,1480,1227,1226,829,1350,879,591,1229,1497,914,554,955,1913,0,2092,874,690,849,1771,1158,1524,1078,534},
    {3237,2556,4003,4487,4117,1312,2700,2498,2937,1586,4193,3126,1583,2115,113,2306,2583,889,1464,2529,2538,2737,1806,4180,187,2848,2608,2409,820,2633,3318,2875,2629,2971,2637,2635,3589,2320,2615,2935,4005,2092,0,2966,2782,2058,3863,3249,3616,3170,2425},
    {503,631,1065,1559,1150,1981,780,862,208,1380,1255,396,1605,1033,3079,660,483,2077,4430,495,960,1044,1160,1242,2779,118,420,1050,2354,1275,380,154,1376,33,329,1060,650,967,533,545,1067,874,2966,0,184,1130,925,306,678,204,723},
    {461,497,1221,1715,1307,1808,704,678,155,1196,1411,344,1432,938,2895,476,349,1893,4246,371,776,1041,976,1398,2595,66,236,898,2170,1122,536,161,1289,189,195,1029,809,852,360,552,1223,690,2782,184,0,957,1081,468,834,388,549},
    {1407,538,2167,26611,2281,850,642,929,1101,784,2357,1290,475,255,2171,727,719,1169,3522,665,1027,679,564,2344,1871,1012,854,350,1446,575,1482,1043,571,1135,805,577,1753,262,597,877,2169,849,2058,1130,957,0,2027,1414,1780,1334,407},
    {967,1528,652,1146,254,2878,1370,1654,1067,2277,770,1084,2492,1930,3976,1557,1380,2974,5327,1402,1664,1634,2054,829,3676,1015,1317,1661,3250,1885,545,1079,2187,892,1226,1649,308,1749,1430,1135,412,1771,3863,925,1081,2027,0,671,284,773,1620},
    {760,915,879,1373,967,2265,699,1123,454,1665,1069,643,1889,1317,3363,944,767,2361,4714,789,1244,963,1444,1056,3063,402,704,990,2638,1214,395,466,1422,279,613,979,479,1079,817,464,813,1158,3249,306,468,1414,671,0,492,102,1007},
    {1126,1281,387,881,475,2631,1191,1502,820,2030,577,1009,2255,1683,3729,1310,1133,2727,4980,1155,1610,1455,1810,564,3429,768,1070,1482,3004,1706,609,832,1914,645,979,1471,475,1571,1183,956,636,1524,3616,678,834,1780,284,492,0,594,1373},
    {684,835,981,1475,1069,2185,650,1066,378,1584,1171,567,1809,1237,3283,864,687,2281,4634,709,1164,915,1364,1158,2983,322,624,942,2558,1166,380,358,1374,203,533,931,581,1031,737,416,915,1078,3170,204,388,1334,773,102,594,0,927},
    {1000,131,1760,2254,1874,1258,534,522,694,839,1949,883,882,310,2578,320,312,1576,3929,258,620,797,619,1937,2278,605,447,469,1853,693,1075,636,817,728,433,695,1346,380,190,591,1762,534,2425,723,549,407,1620,1007,1373,927,0}};




    private class TSPInd {

        ArrayList<Integer> camino;
        int eval;
        Random rand;

        public TSPInd(ArrayList<Integer> l, Random rand) {
            camino = l;
            eval = feval(camino);
            this.rand = rand;
        }

        private int feval(ArrayList<Integer> l) {
            int ev = 0;
            for(int i = 0; i < 49; i++) {
                int ciudad1 = l.get(i);
                int ciudad2 = l.get(i+1);
                ev += CIUDADES[ciudad1][ciudad2];
            }
            return ev + CIUDADES[l.get(0)][l.get(l.size()-1)];
        }

        public void exchangeMutation() {
            int ciudad1 = rand.nextInt(50);
            int ciudad2 = rand.nextInt(50);
            Collections.swap(camino,ciudad1,ciudad2);
            eval = feval(camino);
        }

        public void displacementMutation() {
            int ciudad1A = rand.nextInt(50);
            int ciudad2A = rand.nextInt(50);
            int ciudad1 = Integer.min(ciudad1A,ciudad2A);
            int ciudad2 = Integer.max(ciudad1A,ciudad2A);
            int dif = ciudad2 - ciudad1;
            ArrayList<Integer> res = new ArrayList<>();
            for (int i = 0; i < ciudad1; i++) {
                res.add(camino.get(i));
            }
            for(int i = ciudad2; i < 50; i++) {
                res.add(camino.get(i));
            }
            for(int i = ciudad1; i < ciudad2; i++) {
                res.add(camino.get(i));
            }
            camino = res;
            eval = feval(camino);
        }

    }



    public TSP() {
        rand = new Random();
        generaIncial();
    }

    private void generaIncial() {
        TreeMap<Integer,TSPInd> pob = new TreeMap<>();
        TreeMap<Double,TSPInd> pobRes = new TreeMap<>();
        for(int j = 0; j < PRIMGEN; j++) {
            ArrayList<Integer> l = new ArrayList<>();
            for (int i = 0; i < 50; i++) {
                l.add(i);
            }
            Collections.shuffle(l);
            TSPInd ti = new TSPInd(l,rand);
            pob.put(ti.eval,ti);
        }
        double restantes = 1;
        for (Map.Entry<Integer, TSPInd> et:pob.entrySet()) {
            pobRes.put(restantes,et.getValue());
            restantes = restantes/2;
        }
        poblacionProb = pobRes;
        poblacionOrden = pob;
    }


    private void reemplazo(TSPInd ind1, TSPInd ind2) {
        double prob1 = rand.nextDouble();
        double prob2 = rand.nextDouble();
        if (prob1 > 0 && prob2 > 0) {
            poblacionProb.remove(poblacionProb.floorKey(prob1));
            poblacionProb.remove(poblacionProb.floorKey(prob2));
        } else {
            poblacionProb.remove(poblacionProb.ceilingKey(prob1));
            poblacionProb.remove(poblacionProb.ceilingKey(prob2));
        }
        poblacionOrden.clear();
        for (Map.Entry<Double, TSPInd> et: poblacionProb.entrySet()) {
            TSPInd ind = et.getValue();
            poblacionOrden.put(ind.eval,ind);
        }
        poblacionOrden.put(ind1.eval, ind1);
        poblacionOrden.put(ind2.eval, ind2);
        double restantes = 1;
        for (Map.Entry<Integer, TSPInd> et:poblacionOrden.entrySet()) {
            poblacionProb.put(restantes,et.getValue());
            restantes = restantes/2;
        }
    }

    public void PMX(TSPInd ind1, TSPInd ind2) {
        Random rand = new Random();
        int ciudad1A = rand.nextInt(50);
        int ciudad2A = rand.nextInt(50);
        int ciudad1 = Integer.min(ciudad1A,ciudad2A);
        int ciudad2 = Integer.max(ciudad1A,ciudad2A);
        ArrayList<Integer> res1 = new ArrayList<>();
        ArrayList<Integer> res2 = new ArrayList<>();
        for (int i = 0; i < ciudad1; i++) {
            res1.add(ind1.camino.get(i));
            res2.add(ind2.camino.get(i));
        }
        for(int i = ciudad2; i < 50; i++) {
            res1.add(ind2.camino.get(i));
            res2.add(ind1.camino.get(i));
        }
        for(int i = ciudad1; i < ciudad2; i++) {
            res1.add(ind1.camino.get(i));
            res2.add(ind2.camino.get(i));
        }

        ArrayList<ArrayList<Integer>> mappings = new ArrayList<>();
        ArrayList<Integer> mapped = new ArrayList<>();
        for (int i = ciudad1; i < ciudad2; i++){
            if (mapped.contains(i)) {
                continue;
            } else {
                ArrayList<Integer> map = new ArrayList<>();
                mapped.add(i);
                map.add(res1.get(i));
                int l = i;
                while (fmapping(l,ciudad1,ciudad2,mapped,map,res1,res2)){
                    l = mapped.get(mapped.size()-1);
                }
                if (!map.isEmpty())
                    mappings.add(map);
            }
        }
        for (ArrayList<Integer> map: mappings) {
            int i = map.get(0);
            int j = map.get(map.size()-1);
            for(int k = 0; k < ciudad1; k++) {
                if (res1.get(k) == i) {
                    res1.set(k,j);
                }
                if (res2.get(k) == j) {
                    res2.set(k,i);
                }
            }
            for(int k = ciudad2; k < 50; k++) {
                if (res1.get(k) == i) {
                    res1.set(k,j);
                }
                if (res2.get(k) == j) {
                    res2.set(k,i);
                }
            }
        }
        reemplazo(new TSPInd(res1,rand),new TSPInd(res2,rand));
    }

    private boolean fmapping(int i, int ciudad1, int ciudad2,ArrayList<Integer> mapped, ArrayList<Integer> map ,ArrayList<Integer> r1, ArrayList<Integer> r2) {
        int j = ciudad1;
        while (r2.get(i) != r1.get(j)) {
            if(mapped.contains(j)){
                j++;
                continue;
            }
            j++;
            if (j > ciudad2)
                return false;
        }
        mapped.add(j);
        map.add(r2.get(j));
        return true;
    }

    public void CC(TSPInd ind1, TSPInd ind2) {
        ArrayList<Integer> mapped = new ArrayList<>();
        ArrayList<Integer> map = new ArrayList<>();
        ArrayList<Integer> camino1 = ind1.camino;
        ArrayList<Integer> camino2 = ind2.camino;
        ArrayList<Integer> res1 = new ArrayList<>();
        ArrayList<Integer> res2 = new ArrayList<>();
        int ciudad1A = rand.nextInt(50);
        int ciudad2A = rand.nextInt(50);
        int ciudad1 = Integer.min(ciudad1A,ciudad2A);
        int ciudad2 = Integer.max(ciudad1A,ciudad2A);
        int l = 0;
        while (fmapping(l,ciudad1,ciudad2,mapped,map,camino1,camino2)){
            l = mapped.get(mapped.size()-1);
        }
        for (int i = 0; i < camino1.size(); i++) {
            if (map.contains(camino1.get(i))) {
                res1.add(camino1.get(i));
            } else {
                res1.add(camino2.get(i));
            }
            if (map.contains(camino2.get(i))) {
                res2.add(camino2.get(i));
            } else {
                res2.add(camino1.get(i));
            }
        }
        reemplazo(new TSPInd(res1,rand),new TSPInd(res2,rand));
    }

    public void OC(TSPInd ind1, TSPInd ind2) {
        ArrayList<Integer> camino1 = ind1.camino;
        ArrayList<Integer> camino2 = ind2.camino;
        ArrayList<Integer> res1 = new ArrayList<>();
        ArrayList<Integer> res2 = new ArrayList<>();
        Random rand = new Random();
        int ciudad1A = rand.nextInt(50);
        int ciudad2A = rand.nextInt(50);
        int ciudad1 = Integer.min(ciudad1A,ciudad2A);
        int ciudad2 = Integer.max(ciudad1A,ciudad2A);
        for (int i = 0; i < camino1.size(); i++) {
            if (i < ciudad2 && i >= ciudad1) {
                res1.add(camino1.get(i));
                res2.add(camino2.get(i));
            } else {
                res1.add(-1);
                res2.add(-1);
            }
        }
        for(int i = 0; i < camino1.size(); i++) {
            int c1 = camino1.get(i);
            int c2 = camino2.get(i);
            if (!res1.contains(c2)) {
                int k = 0;
                while (res1.get(k) != -1) {
                    k++;
                }
                res1.set(k,c2);
            }
            if (!res2.contains(c1)) {
                int k = 0;
                while (res2.get(k) != -1) {
                    k++;
                }
                res2.set(k,c1);
            }
        }
        reemplazo(new TSPInd(res1,rand),new TSPInd(res2,rand));
    }

    public TSPInd eleccion() {
        double random = rand.nextDouble();
        Map.Entry<Double, TSPInd> et = poblacionProb.lowerEntry(random);
        return et.getValue();
    }

    public static void main(String[] args) {
        TSP tsp = new TSP();
        int minEval = tsp.poblacionOrden.firstKey();
        int maxEval = tsp.poblacionOrden.lastKey();
        int contadorNoMejora = 0;
        int iteraciones = 0;
        double random = tsp.rand.nextDouble();
        System.out.println(minEval + " , " + maxEval);
        while (contadorNoMejora < 10 || iteraciones < 200) {
            int prob1 = (int)((random*10)%3);
            switch (prob1) {
                case 0:
                    tsp.PMX(tsp.eleccion(),tsp.eleccion());
                    break;
                case 1:
                    tsp.CC(tsp.eleccion(),tsp.eleccion());
                    break;
                case 2:
                    tsp.OC(tsp.eleccion(),tsp.eleccion());
                    break;
            }
            random = tsp.rand.nextDouble();
            for(Map.Entry<Double, TSPInd> et: tsp.poblacionProb.entrySet()) {
                if(random < tsp.MUTPROB) {
                    random = tsp.rand.nextDouble();
                    prob1 = (int)((random*10)%2);
                    TSPInd ind = tsp.eleccion();
                    switch (prob1) {
                        case 0:
                            ind.exchangeMutation();
                            break;
                        case 1:
                            ind.displacementMutation();
                            break;

                    }
                }
            }

            System.out.println("--------------------------");
            System.out.println("Generacion " + iteraciones);
            System.out.println("Mejor evaluacion: " + tsp.poblacionOrden.firstKey());
            iteraciones++;
        }


    }
}
